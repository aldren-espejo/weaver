// can be overwritten
$total-columns: 12 !default;
$column-gutter: 30 !default;
$with-default-gutters: false !default;
$default-gutters: rem-calc( 0 ($column-gutter/2) ) !default;


// Function to calculate the grid width
@function grid-calc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

// create the grid placeholders in each breakponits
@each $breakpoint in $breakpoints {
	$name : map-keys($breakpoint);
	$value : map-values($breakpoint);

	@media #{$value} {
		@for $i from 1 through 12{

			%grid-#{$i}-columns-#{$name}{
				width: grid-calc($i, $total-columns);
				float: left;

				@if $with-default-gutters == true{
					padding: $default-gutters;
				}
			}

			%grid-#{$i}-columns-#{$name}-with-gutters{
				width: grid-calc($i, $total-columns);
				float: left;
				padding: $default-gutters;
			}
		}
	}
}


// grid helpres
@mixin grid-sml($columns, $padding: null, $clearfix: null, $centered: false){
	@include grid($columns, $padding, sml, $clearfix, $centered);
}

@mixin grid-med($columns, $padding: null, $clearfix: null, $centered: false){
	@include grid($columns, $padding, med, $clearfix, $centered);
}

@mixin grid-lrg($columns, $padding: null, $clearfix: null, $centered: false){
	@include grid($columns, $padding, lrg, $clearfix, $centered);
}


@mixin grid($columns, $padding, $breakpoint, $clearfix, $centered){
	$with: null;

	@if $padding {
		@if $padding == default {
			@if $with-default-gutters == false {
				$with: "-with-gutters";
			}
		} @else {
			padding: rem-calc($padding);
		}
	}

	@if $clearfix == true {
		@include clearfix;
	}

	@extend %grid-#{$columns}-columns-#{$breakpoint}#{$with};

	@if $centered == true {
		@extend %e_centered-#{$breakpoint};
	}
}